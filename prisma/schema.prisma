generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                    String                     @unique
  hashed_password          String
  created_at               DateTime                   @default(now()) @db.Timestamptz(6)
  updated_at               DateTime                   @default(now()) @db.Timestamptz(6)
  email_verified           Boolean                    @default(false)
  email_verification_code  String?
  password_reset_code      String?
  password_at              DateTime                   @default(now()) @db.Timestamptz(6)
  display_name             String?
  avatar_file_key          String?
  admins                   admins?
  contact_form_submissions contact_form_submissions[]
  teams_users              teams_users[]
}

model contact_form_submissions {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?
  email      String
  message    String
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  users      users?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model invitations {
  team_id    String   @db.Uuid
  email      String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  teams      teams    @relation(fields: [team_id], references: [id], onDelete: Cascade)

  @@id([team_id, email])
}

model projects {
  id                                  String                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                String
  created_at                          DateTime                              @default(now()) @db.Timestamptz(6)
  updated_at                          DateTime                              @default(now()) @db.Timestamptz(6)
  start_time                          DateTime?                             @db.Timestamptz(6)
  stop_time                           DateTime?                             @db.Timestamptz(6)
  objective                           String?
  branding                            String?
  status                              String                                @default("draft")
  platform                            String?
  project_type                        String?
  name_approved                       Boolean?
  objective_approved                  Boolean?
  project_type_approved               Boolean?
  brandness_approved                  Boolean?
  platform_approved                   Boolean?
  start_stop_time_approved            Boolean?
  final_report_upload_url             String?
  product_description                 String?
  copy_configurations                 copy_configurations?
  facebook_audiences                  facebook_audiences[]
  facebook_creatives                  facebook_creatives[]
  landing_pages                       landing_pages[]
  project_facebook_creative_templates project_facebook_creative_templates[]
  projects_themes                     projects_themes[]
  teams_projects                      teams_projects[]
}

model teams {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  invitations    invitations[]
  teams_projects teams_projects[]
  teams_users    teams_users[]
}

model teams_projects {
  project_id String   @db.Uuid
  team_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  projects   projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  teams      teams    @relation(fields: [team_id], references: [id], onDelete: Cascade)

  @@id([project_id, team_id])
}

model teams_users {
  team_id     String      @db.Uuid
  user_id     String      @db.Uuid
  created_at  DateTime    @default(now()) @db.Timestamptz(6)
  role        String      @default("member")
  teams_roles teams_roles @relation(fields: [role], references: [role], onDelete: NoAction, onUpdate: NoAction)
  teams       teams       @relation(fields: [team_id], references: [id], onDelete: Cascade)
  users       users       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([team_id, user_id])
}

model teams_roles {
  role        String        @id
  description String
  teams_users teams_users[]
}

model facebook_audiences {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id          String   @db.Uuid
  name                String?
  min_age             Decimal? @default(18) @db.Decimal
  max_age             Decimal? @default(65) @db.Decimal
  genders             Int[]    @default([1, 2])
  device_platforms    String[] @default(["mobile", "desktop"])
  facebook_positions  String[] @default(["feed"])
  geo_locations       Json     @default("{\"countries\": [\"US\"]}")
  publisher_platforms String[] @default(["facebook"])
  interests           Json?
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
  approved            Boolean?
  projects            projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model projects_themes {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id         String               @db.Uuid
  name               String
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime             @default(now()) @db.Timestamptz(6)
  approved           Boolean?
  facebook_creatives facebook_creatives[]
  projects           projects             @relation(fields: [project_id], references: [id], onDelete: Cascade)
  themes_angles      themes_angles[]
}

model themes_angles {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  theme_id           String               @db.Uuid
  name               String
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime             @default(now()) @db.Timestamptz(6)
  facebook_creatives facebook_creatives[]
  projects_themes    projects_themes      @relation(fields: [theme_id], references: [id], onDelete: Cascade)
}

model facebook_creatives {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id      String          @db.Uuid
  template_name   String
  data            Json?
  created_at      DateTime        @default(now()) @db.Timestamptz(6)
  updated_at      DateTime        @default(now()) @db.Timestamptz(6)
  theme_id        String          @db.Uuid
  angle_id        String          @db.Uuid
  social_copy     String?
  cta_type        String?
  cta_text        String?
  themes_angles   themes_angles   @relation(fields: [angle_id], references: [id], onDelete: Cascade)
  projects        projects        @relation(fields: [project_id], references: [id], onDelete: Cascade)
  projects_themes projects_themes @relation(fields: [theme_id], references: [id], onDelete: Cascade)
}

model landing_pages {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id          String                @db.Uuid
  template_name       String
  data                Json?
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  updated_at          DateTime              @default(now()) @db.Timestamptz(6)
  approved            Boolean?
  landing_page_events landing_page_events[]
  projects            projects              @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model landing_page_events {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  landing_page_id String        @db.Uuid
  event           String
  sub_event       String?
  payload         Json?
  utm_source      String?
  utm_medium      String?
  utm_campaign    String?
  utm_term        String?
  utm_content     String?
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  landing_pages   landing_pages @relation(fields: [landing_page_id], references: [id], onDelete: Cascade)
}

model project_facebook_creative_templates {
  id            String   @id(map: "project_facebook_creative_template_pkey") @unique(map: "project_facebook_creative_template_id_key") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id    String   @db.Uuid
  template_name String
  data          Json?
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
  projects      projects @relation(fields: [project_id], references: [id], onDelete: Cascade, map: "project_facebook_creative_template_project_id_fkey")
}

model admins {
  user_id    String   @id @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model copy_configurations {
  project_id      String   @id @db.Uuid
  brand_tone      String?
  perspective     String?  @default("1st")
  character_count Int?     @default(150)
  template_type   String?  @default("list")
  tone            String?  @default("humorous")
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)
  projects        projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
}
